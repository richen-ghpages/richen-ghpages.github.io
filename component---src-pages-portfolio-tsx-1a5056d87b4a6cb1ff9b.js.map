{"version":3,"sources":["webpack://richen-portfolio/./src/components/PageHeader.tsx","webpack://richen-portfolio/./src/components/PageMain.tsx","webpack://richen-portfolio/./src/components/ProjectCardGroup.tsx","webpack://richen-portfolio/./src/pages/portfolio.tsx"],"names":["SPageHeaderContainer","styled","props","theme","palette","common","pageBackgroundAlt","children","SPageMain","TPageMain","projectCardData","title","src","alt","text","live","github","SProjectContainer","MDBContainer","SCard","TCard","SCardTitleContainer","SCardTitle","TCardTitle","SCardButton","TButtonPrimary","SCardImage","MDBCardImage","SCardBody","TCardBody","SCardText","TCardText","map","project","key","href","overlay","position","SPortfolioIntro","SPortfolioIntroH2","TTextPrimary","SPortfolioIntroText","site","siteMetadata","socials","useStaticQuery","Layout","PageHeader","className","to","PageMain"],"mappings":"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","file":"component---src-pages-portfolio-tsx-1a5056d87b4a6cb1ff9b.js","sourcesContent":["/* eslint-disable react/require-default-props */\nimport React from 'react';\nimport styled, { DefaultTheme, ThemeProps } from 'styled-components';\n\ninterface PageHeaderProps {\n  children?: React.ReactNode;\n}\n\nconst SPageHeaderContainer = styled.div<ThemeProps<DefaultTheme>>`\n  display: flex;\n  padding: 30px 40px;\n  margin: 0;\n  background-color: ${props => props.theme.palette.common.pageBackgroundAlt};\n  width: 100%;\n`;\n\nconst PageHeader: React.FC<PageHeaderProps> = ({\n  children,\n}: PageHeaderProps) => {\n  return <SPageHeaderContainer>{children}</SPageHeaderContainer>;\n};\n\nexport default PageHeader;\n","/* eslint-disable react/require-default-props */\nimport React from 'react';\nimport styled from 'styled-components';\nimport { TPageMain } from './ThemedComponents';\n\ninterface Props {\n  children?: React.ReactNode;\n}\n\nconst SPageMain = styled(TPageMain)`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  height: 100%;\n`;\n\nconst PageMain: React.FunctionComponent<Props> = ({ children }: Props) => {\n  return <SPageMain>{children}</SPageMain>;\n};\n\nexport default PageMain;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { MDBCardImage, MDBContainer } from 'mdb-react-ui-kit';\nimport { OutboundLink } from 'gatsby-plugin-google-gtag';\nimport {\n  TCard,\n  TCardTitle,\n  TButtonPrimary,\n  TCardText,\n  TCardBody,\n} from './ThemedComponents';\n\nconst projectCardData = [\n  {\n    title: 'BlogList',\n    src: `bloglist-mockup.png`,\n    alt: 'BlogList App Mockup',\n    text: 'List your favourite blogs! Authenticated and secure, this application was built using NodeJS, ReactJS, MongoDB, ReduxJS, and ExpressJS. It shows knowledge of User Authentication, Routing, Unit testing, End to End Testing, State Management and Production Pipelines',\n    live: 'https://richen-bloglist.herokuapp.com/',\n    github: 'https://github.com/richen604/richen-bloglist',\n  },\n  {\n    title: 'Library',\n    src: `library-mockup.png`,\n    alt: 'Library App Mockup',\n    text: 'List your favourite books! Authenticated and secure, this application was built using NodeJS, ReactJS, MongoDB, Apollo GraphQL, and ExpressJS. It shows knowledge of Apollo GraphQL Queries, Mutations, Subscriptions, Fragments, and Error Handling. This application also outlines User Authentication, State Management, and Production Pipelines.',\n    live: 'https://richen-library.herokuapp.com/',\n    github: 'https://github.com/richen604/richen-library',\n  },\n  {\n    title: 'RateRepo',\n    src: `raterepo-mockup.png`,\n    alt: 'RateRepo App Mockup',\n    text: 'A mobile application for rating Github repositories built using NodeJS, React Native, GraphQL, Apollo Client, and Expo. This application outlines knowledge of Mobile Development, User Authentication, Unit Testing, Form Validation, State Management, and Infinite Scrolling. ',\n    live: null,\n    github: 'https://github.com/richen604/richen-raterepo-app',\n  },\n  {\n    title: 'Patientor',\n    src: `patientor-mockup.png`,\n    alt: 'Patientor App Mockup',\n    text: 'Work in healthcare? Organize your patients and list diagnosis with this web app! This application was built using NodeJS, ReactJS, Typescript, and ExpressJS. It shows knowledge of Typescript features such as Types, Enums, and Interfaces. This application also outlines Form Validation, Proofing Express Requests, State Management and CI/CD Pipelines.',\n    live: 'https://richen-patientor.herokuapp.com/',\n    github: 'https://github.com/richen604/richen-patientor',\n  },\n  {\n    title: 'Anecdotes',\n    src: `anecdotes-mockup.png`,\n    alt: 'Anecdotes App Mockup',\n    text: 'List your favourite anecdotes in this single-page app! This application was built using NodeJS, ReactJS, MongoDB, ReduxJS, ExpressJS, and many more packages! It shows knowledge of Flux-Architecture, managing States with Reducers, Redux Devtools, Asynchronous Action Creators, and Production Pipelines',\n    live: 'https://richen-anecdotes.herokuapp.com/',\n    github: 'https://github.com/richen604/richen-anecdotes',\n  },\n\n  {\n    title: 'PhoneBook',\n    src: `phonebook-mockup.png`,\n    alt: 'PhoneBook App Mockup',\n    text: 'Manage your own phone numbers and more with richen-phonebook! This application was built using NodeJS, ReactJS, MongoDB, ExpressJS, and many more packages! ',\n    live: 'https://richen-phonebook.herokuapp.com/',\n    github: 'https://github.com/richen604/richen-phonebook',\n  },\n  {\n    title: 'Eskobot',\n    src: `discord-mockup.svg`,\n    alt: 'Eskobot App Mockup',\n    text: 'A discord bot for use with moderation, logging, games, and much more! Built to support multiple servers, local development, and production deployment. This application outlines the knowledge of building an application based on user feedback. Technologies used are NodeJS, Event Listeners, Refactoring, Sequelize, ES6 Array Methods',\n    live: null,\n    github: 'https://github.com/richen604/Eskobot',\n  },\n  {\n    title: 'richen.dev',\n    src: `richen-image.png`,\n    alt: 'richen.dev Mockup',\n    text: 'My portfolio website built with GatsbyJS, ReactJS, NodeJS, and GraphQL. A static website outlining client and server Form Validation, communicating with Express servers, Sanitization, and Validation.',\n    live: '/',\n    github: 'https://github.com/richen604/richen-portfolio',\n  },\n];\n\nconst SProjectContainer = styled(MDBContainer)`\n  display: flex;\n  justify-content: center;\n  flex-direction: row;\n  flex-wrap: wrap;\n  padding: 50px;\n  max-width: 100%;\n`;\n\nconst SCard = styled(TCard)`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px;\n  margin: 15px;\n  max-width: 400px;\n  height: auto;\n  border: none;\n  border-radius: 10px;\n  @media only screen and (max-width: 1251px) {\n    max-width: 1000px;\n  }\n`;\n\nconst SCardTitleContainer = styled.div`\n  font-family: 'Roboto', sans-serif;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  margin: 10px 0 -20px 0;\n`;\n\nconst SCardTitle = styled(TCardTitle)`\n  text-align: left;\n  font-family: 'Roboto', sans-serif;\n  font-size: 1.5rem;\n  line-height: 1.2;\n  font-weight: 700;\n  margin: 0 15px;\n`;\n\nconst SCardButton = styled(TButtonPrimary)`\n  font-family: 'Roboto', sans-serif;\n  margin: 15px 5px;\n  width: 80px;\n`;\n\nconst SCardButtonPlaceholder = styled(TButtonPrimary)``;\n\nconst SCardImage = styled(MDBCardImage)`\n  width: 380px;\n  max-height: 200px;\n  margin-top: 10px;\n  object-fit: contain;\n`;\n\nconst SCardBody = styled(TCardBody)`\n  padding-top: 0;\n`;\n\nconst SCardText = styled(TCardText)`\n  font-family: 'Roboto', sans-serif;\n  font-size: 0.875rem;\n  line-height: 21px;\n  font-weight: 400;\n`;\n\nconst ProjectCardGroup = () => {\n  return (\n    <SProjectContainer>\n      {projectCardData.map(project => (\n        <SCard key={project.title}>\n          {project.live ? (\n            <OutboundLink href={project.live}>\n              <SCardImage\n                overlay\n                position=\"top\"\n                src={project?.src}\n                alt={project?.alt}\n              />\n            </OutboundLink>\n          ) : (\n            <SCardImage\n              overlay\n              position=\"top\"\n              src={project?.src}\n              alt={project?.alt}\n            />\n          )}\n\n          <SCardBody>\n            <SCardTitleContainer>\n              <SCardTitle>{project?.title}</SCardTitle>\n              {project.live ? (\n                <>\n                  <SCardButton href={project?.live}>Live</SCardButton>\n                </>\n              ) : null}\n              <SCardButton href={project.github}>Github</SCardButton>\n            </SCardTitleContainer>\n\n            <br />\n            <SCardText>{project?.text}</SCardText>\n          </SCardBody>\n        </SCard>\n      ))}\n    </SProjectContainer>\n  );\n};\n\nexport default ProjectCardGroup;\n","import React from 'react';\n\nimport { graphql, useStaticQuery } from 'gatsby';\nimport { MDBContainer } from 'mdb-react-ui-kit';\nimport styled from 'styled-components';\nimport Layout from '../components/Layout';\nimport SEO from '../components/Seo';\nimport PageHeader from '../components/PageHeader';\nimport ProjectCardGroup from '../components/ProjectCardGroup';\nimport PageMain from '../components/PageMain';\nimport {\n  TTextPrimary,\n  TLocalLinkText,\n  TOutboundLinkText,\n} from '../components/ThemedComponents';\n\nconst SPortfolioIntro = styled(MDBContainer)`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst SPortfolioIntroH2 = styled(TTextPrimary)`\n  text-align: center;\n  margin: 5px 13px;\n  font-family: 'Roboto', sans-serif;\n  font-size: 3rem;\n  line-height: 1.2;\n  font-weight: 700;\n`;\n\nconst SPortfolioIntroText = styled(TTextPrimary)`\n  text-align: center;\n  margin: 15px 16px;\n  margin-top: 20px;\n  font-family: 'Roboto', sans-serif;\n  font-size: 16px;\n  line-height: 24px;\n  font-weight: 400;\n`;\n\nfunction Portfolio() {\n  const {\n    site: {\n      siteMetadata: { socials },\n    },\n  } = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          socials {\n            github\n          }\n        }\n      }\n    }\n  `);\n\n  return (\n    <Layout>\n      <SEO title=\"Portfolio\" />\n      <PageHeader>\n        <SPortfolioIntro>\n          <SPortfolioIntroH2>Portfolio</SPortfolioIntroH2>\n          <SPortfolioIntroText>\n            Welcome to my portfolio. All of these projects can be seen on my\n            github{' '}\n            <TOutboundLinkText href={socials.github}>here</TOutboundLinkText>\n            .<br />\n            If you want and application or website similar to what you see, feel\n            free to contact me{' '}\n            <TLocalLinkText className=\"index-text-link\" to=\"/contact\">\n              here\n            </TLocalLinkText>\n            .\n          </SPortfolioIntroText>\n        </SPortfolioIntro>\n      </PageHeader>\n      <PageMain>\n        <ProjectCardGroup />\n      </PageMain>\n    </Layout>\n  );\n}\n\nexport default Portfolio;\n"],"sourceRoot":""}